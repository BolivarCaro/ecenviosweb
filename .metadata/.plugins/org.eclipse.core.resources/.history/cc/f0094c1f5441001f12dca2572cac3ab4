package com.proyecto.crudecenvios.springbootecenvios.controllers;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.proyecto.crudecenvios.springbootecenvios.dto.CustomerRecordDTO;
import com.proyecto.crudecenvios.springbootecenvios.model.Person;
import com.proyecto.crudecenvios.springbootecenvios.services.CustomerService;

@Controller
@RequestMapping("/record")
public class recordCustomerController {

	private CustomerService customerService;

	public recordCustomerController(CustomerService customerService) {
		super();
		this.customerService = customerService;
	}

	@ModelAttribute("customer")
	public CustomerRecordDTO returnNewCustomerRecordDTO() {
		return new CustomerRecordDTO();
	}

	@GetMapping
	public String displayRegistrationForm(Model model) {
		CustomerRecordDTO customer = new CustomerRecordDTO(); // Crear una instancia de CustomerRecordDTO
		model.addAttribute("customer", customer); // Agregar customer al modelo con el nombre "customer"
		return "record"; // Nombre de tu vista Thymeleaf (record.html)
	}

	@PostMapping
	public String RegisterUserAccount(@ModelAttribute("customer") CustomerRecordDTO recordDTO) {

		if (recordDTO.getPasswordUser() == null || recordDTO.getPasswordUser().isEmpty()) {
			return "redirect:/record?error=passwordRequired";
		}
		customerService.save(recordDTO);
		return "redirect:/record?exito";

	}

	

    @GetMapping("/edit/{id}")
    public String showEditForm(@PathVariable("id") Long id, Model model) {
        Person customer = customerService.getPersonById(id);
        model.addAttribute("customer", customer);
        return "edit"; // Asegúrate de que edit.html está en src/main/resources/templates/
    }

    @PostMapping("/edit/{id}")
    public String updateCustomer(@PathVariable("id") Long id, @ModelAttribute("customer") Person customer, RedirectAttributes redirectAttributes) {
        try {
            customerService.updatePerson(id, customer);
            redirectAttributes.addFlashAttribute("message", "Cliente actualizado con éxito.");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Error al actualizar el cliente.");
        }
        return "redirect:/customers/index"; // Cambia esto si necesitas redirigir a otra página
    }

    @GetMapping("/delete/{id}")
    public String deleteConfirm(@PathVariable Long id, Model model) {
        model.addAttribute("person", customerService.getPersonById(id)); // Asegúrate de que esta función retorna el cliente correctamente
        return "deleteConfirm"; // Asegúrate de que deleteConfirm.html está en src/main/resources/templates/
    }

    @PostMapping("/delete/{id}")
    public String deletePerson(@PathVariable("id") Long id, RedirectAttributes redirectAttributes) {
        try {
            customerService.deletePersonById(id);
            redirectAttributes.addFlashAttribute("message", "Cliente eliminado con éxito.");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Error al eliminar el cliente.");
        }
        return "redirect:/list"; // Cambia esto si necesitas redirigir a otra página
    }
}