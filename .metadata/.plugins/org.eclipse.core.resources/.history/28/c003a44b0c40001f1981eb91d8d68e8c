package com.proyecto.crudecenvios.springbootecenvios.services;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.proyecto.crudecenvios.springbootecenvios.dto.CustomerRecordDTO;
import com.proyecto.crudecenvios.springbootecenvios.model.OrdersUsers;
import com.proyecto.crudecenvios.springbootecenvios.model.Person;
import com.proyecto.crudecenvios.springbootecenvios.repositorio.CustomerRepository;

@Service
public class CustomerServiceImpl implements CustomerService, UserDetailsService{
	
	@Autowired
	private final BCryptPasswordEncoder passwordEncoder;

	private final CustomerRepository customerRepository;

	public CustomerServiceImpl(CustomerRepository customerRepository,  BCryptPasswordEncoder passwordEncoder) {
		this.customerRepository = customerRepository;
		this.passwordEncoder = passwordEncoder;
	}

	@Override
	public Person save(CustomerRecordDTO recordDTO) {
		
		String rawPassword = recordDTO.getPasswordUser();
		if (recordDTO.getPasswordUser() == null || recordDTO.getPasswordUser().isEmpty()) {
	        throw new IllegalArgumentException("La contraseña no puede ser nula o vacía");
	    }
	    
	    // Codificar la contraseña solo si no es nula ni vacía
	    String encodedPassword = passwordEncoder.encode(rawPassword);

		
		Person person = new Person(recordDTO.getFirstName(), recordDTO.getLastName(), recordDTO.getDocumentType(), 
				recordDTO.getDocument(), recordDTO.getAge(), recordDTO.getMobilePhone(), recordDTO.getEmail(),
				recordDTO.getAddress(), recordDTO.getUserName(), encodedPassword,  recordDTO.getConfirmationPassword());
		return customerRepository.save(person);
	}
	

	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		Person person = customerRepository.findByEmail(username);
        if (person == null) {
            throw new UsernameNotFoundException("Usuario no encontrado con el email: " + username);
        }
        return new User(person.getEmail(), person.getPasswordUser(), null);
    }

	/*
	 * private Collection<? extends GrantedAuthority>
	 * mapearAutoridadesOrders(Collection<OrdersUsers> orders) { return
	 * orders.stream() .map(order -> new
	 * SimpleGrantedAuthority(order.getOrderStatus()))
	 * .collect(Collectors.toList()); }
	 */

	@Override
	public List<Person> listarPerson() {
		// TODO Auto-generated method stub
		return customerRepository.findAll();
	}
}

