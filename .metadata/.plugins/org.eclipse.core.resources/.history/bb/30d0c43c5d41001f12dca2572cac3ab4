package com.proyecto.crudecenvios.springbootecenvios.controllers;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.proyecto.crudecenvios.springbootecenvios.dto.CustomerRecordDTO;
import com.proyecto.crudecenvios.springbootecenvios.model.Person;
import com.proyecto.crudecenvios.springbootecenvios.services.CustomerService;

@Controller
@RequestMapping("/record")
public class recordCustomerController {

	private CustomerService customerService;

	public recordCustomerController(CustomerService customerService) {
		super();
		this.customerService = customerService;
	}

	@ModelAttribute("customer")
	public CustomerRecordDTO returnNewCustomerRecordDTO() {
		return new CustomerRecordDTO();
	}

	@GetMapping
	public String displayRegistrationForm(Model model) {
		CustomerRecordDTO customer = new CustomerRecordDTO(); // Crear una instancia de CustomerRecordDTO
		model.addAttribute("customer", customer); // Agregar customer al modelo con el nombre "customer"
		return "record"; // Nombre de tu vista Thymeleaf (record.html)
	}

	@PostMapping
	public String RegisterUserAccount(@ModelAttribute("customer") CustomerRecordDTO recordDTO) {

		if (recordDTO.getPasswordUser() == null || recordDTO.getPasswordUser().isEmpty()) {
			return "redirect:/record?error=passwordRequired";
		}
		customerService.save(recordDTO);
		return "redirect:/record?exito";

	}
	
	@GetMapping("/edit/{id}")
    public String displayEditForm(@PathVariable Long id, Model model) {
        Person person = customerService.getPersonById(id);
        CustomerRecordDTO recordDTO = new CustomerRecordDTO(); // Mapea los atributos de 'person' a 'recordDTO'
        // Asignar valores de 'person' a 'recordDTO'
        recordDTO.setId(person.getId());
        recordDTO.setFirstName(person.getFirstName());
        recordDTO.setLastName(person.getLastName());
        recordDTO.setDocumentType(person.getDocumentType());
        recordDTO.setDocument(person.getDocument());
        recordDTO.setAge(person.getAge());
        recordDTO.setMobilePhone(person.getMobilePhone());
        recordDTO.setEmail(person.getEmail());
        recordDTO.setUserName(person.getUserName());

        model.addAttribute("customer", recordDTO);
        return "edit"; // Nombre de tu vista Thymeleaf (edit.html)
    }

    @PostMapping("/edit/{id}")
    public String updateUserAccount(@PathVariable Long id, @ModelAttribute("customer") CustomerRecordDTO recordDTO) {
        customerService.updatePerson(id, new Person(
                recordDTO.getFirstName(),
                recordDTO.getLastName(),
                recordDTO.getDocumentType(),
                recordDTO.getDocument(),
                recordDTO.getAge(),
                recordDTO.getMobilePhone(),
                recordDTO.getEmail(),
                recordDTO.getAddress(),
                recordDTO.getUserName(),
                recordDTO.getPasswordUser(), // Asegúrate de que la contraseña sea la correcta o se maneje de otra manera
                recordDTO.getConfirmationPassword()
        ));
        return "redirect:/record?actualizado"; // Redirigir después de actualizar
    }

    @GetMapping("/delete/{id}")
    public String confirmDelete(@PathVariable Long id, Model model) {
        Person person = customerService.getPersonById(id);
        model.addAttribute("customer", person);
        return "deleteConfirm"; // Nombre de tu vista Thymeleaf (deleteConfirm.html)
    }

    @PostMapping("/delete/{id}")
    public String deleteUserAccount(@PathVariable Long id) {
        customerService.deletePersonById(id);
        return "redirect:/record?eliminado"; // Redirigir después de eliminar
    }
}

