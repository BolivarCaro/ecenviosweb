package com.proyecto.crudecenvios.springbootecenvios.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.csrf.CookieCsrfTokenRepository;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import com.proyecto.crudecenvios.sprindbootecenvios.services.CustomerService;

@Configuration
@EnableWebSecurity
public class securityConfig {
	
	private final UserDetailsService customerService;
	
	public securityConfig(CustomerService customerService) {
		this.customerService = (UserDetailsService) customerService;
	}
	@Bean
	public BCryptPasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	 @Bean
	    public DaoAuthenticationProvider authenticationProvider() {
	        DaoAuthenticationProvider auth = new DaoAuthenticationProvider();
	        auth.setUserDetailsService(customerService);
	        auth.setPasswordEncoder(passwordEncoder());
	        return auth;
	    }

	    @Bean
	    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
	        http.csrf().csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());

	        http.authorizeRequests()
	            .requestMatchers("/registro**", "/js/**", "/css/**", "/img/**").permitAll()
	            .anyRequest().authenticated()
	            .and()
	            .formLogin()
	                .loginPage("/login")
	                .permitAll()
	            .and()
	            .logout()
	                .invalidateHttpSession(true)
	                .clearAuthentication(true)
	                .logoutRequestMatcher(new AntPathRequestMatcher("/logout"))
	                .logoutSuccessUrl("/login?logout")
	                .permitAll();

	        return http.build();
	    }
}
pa