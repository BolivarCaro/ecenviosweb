package com.proyecto.crudecenvios.springbootecenvios.services;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.proyecto.crudecenvios.sprindbootecenvios.model.OrdersUsers;
import com.proyecto.crudecenvios.sprindbootecenvios.model.Person;
import com.proyecto.crudecenvios.springbootecenvios.dto.CustomerRecordDTO;
import com.proyecto.crudecenvios.springbootecenvios.repositorio.CustomerRepository;

@Service
public class CustomerServiceImpl implements CustomerService {
	
	@Autowired
	private BCryptPasswordEncoder passwordEncoder;

	private final CustomerRepository customerRepository;

	public CustomerServiceImpl(CustomerRepository customerRepository) {
		this.customerRepository = customerRepository;
	}

	@Override
	public Person save(CustomerRecordDTO recordDTO) {
		Person person = new Person(recordDTO.getFirstName(), recordDTO.getLastName(), recordDTO.getDocumentType(), 
				recordDTO.getDocument(), recordDTO.getAge(), recordDTO.getMobilePhone(), recordDTO.getEmail(),
				recordDTO.getAddress(), recordDTO.getUserName(), passwordEncoder.encode(recordDTO.getPasswordUser()), recordDTO.getConfirmationPassword(), 
				 Collections.emptyList());
		return customerRepository.save(person);
	}
	

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		Person person = customerRepository.findByEmail(username);
        if (person == null) {
            throw new UsernameNotFoundException("Usuario no encontrado con el email: " + username);
        }
        return new User(person.getEmail(), person.getPasswordUser(), mapearAutoridadesOrders(person.getOrders()));
    }

    private Collection<? extends GrantedAuthority> mapearAutoridadesOrders(Collection<OrdersUsers> orders) {
        return orders.stream()
                .map(order -> new SimpleGrantedAuthority(order.getOrderStatus()))
                .collect(Collectors.toList());
    }

	@Override
	public List<Person> listarPerson() {
		// TODO Auto-generated method stub
		return customerRepository.findAll();
	}
}

