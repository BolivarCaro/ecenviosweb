package com.proyecto.crudecenvios.sprindbootecenvios.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import com.proyecto.crudecenvios.sprindbootecenvios.services.CustomerService;

@Configuration
@EnableWebSecurity
public class SecurityConfig{
	
	@Autowired
	private CustomerService customerService;
	
	@Bean
	public BCryptPasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Bean
	public DaoAuthenticationProvider authenticationProvider() {
		DaoAuthenticationProvider auth = new DaoAuthenticationProvider();
		auth.setUserDetailsService(customerService);
		auth.setPasswordEncoder(passwordEncoder());
		return auth;
	}
	
	protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
                .antMatchers(
                    "/record/**", // Permitir acceso a /record y sus subrutas
                    "/js/**",     // Permitir acceso a recursos estáticos en /js
                    "/css/**",    // Permitir acceso a recursos estáticos en /css
                    "/img/**"     // Permitir acceso a recursos estáticos en /img
                )
                .permitAll() // Permitir acceso sin autenticación
            .anyRequest()
                .authenticated() // Requiere autenticación para cualquier otra ruta
            .and()
            .formLogin()
                .loginPage("/login") // URL de la página de login
                .permitAll() // Permitir acceso a la página de login
            .and()
            .logout()
                .invalidateHttpSession(true) // Invalidar sesión al hacer logout
                .clearAuthentication(true)  // Limpiar autenticación al hacer logout
                .logoutUrl("/logout") // URL para logout
                .logoutSuccessUrl("/login?logout") // URL a donde redirigir después del logout
                .permitAll(); // Permitir acceso a la URL de logout
    }
	
}
