package com.proyecto.crudecenvios.springbootecenvios.controllers;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.proyecto.crudecenvios.springbootecenvios.dto.CustomerRecordDTO;
import com.proyecto.crudecenvios.springbootecenvios.model.Person;
import com.proyecto.crudecenvios.springbootecenvios.services.CustomerService;

import jakarta.validation.Valid;

@Controller
@RequestMapping("/record")
public class recordCustomerController {

	private CustomerService customerService;

	public recordCustomerController(CustomerService customerService) {
		super();
		this.customerService = customerService;
	}

	@ModelAttribute("customer")
	public CustomerRecordDTO returnNewCustomerRecordDTO() {
		return new CustomerRecordDTO();
	}

	@GetMapping
	public String displayRegistrationForm(Model model) {
		CustomerRecordDTO customer = new CustomerRecordDTO(); // Crear una instancia de CustomerRecordDTO
		model.addAttribute("customer", customer); // Agregar customer al modelo con el nombre "customer"
		return "record"; // Nombre de tu vista Thymeleaf (record.html)
	}

	@PostMapping
	public String RegisterUserAccount(@ModelAttribute("customer") CustomerRecordDTO recordDTO) {

		if (recordDTO.getPasswordUser() == null || recordDTO.getPasswordUser().isEmpty()) {
			return "redirect:/record?error=passwordRequired";
		}
		customerService.save(recordDTO);
		return "redirect:/record?exito";

	}

	@GetMapping("/editar")
	public String showEditPage(Model model, @RequestParam int id) {
		try {
			Producto prod = repo.findById(id).get();
			model.addAttribute("producto", prod);

			ProductoDto productoDto = new ProductoDto();
			productoDto.setNombre(prod.getNombre());
			productoDto.setMarca(prod.getMarca());
			productoDto.setCategoria(prod.getCategoria());
			productoDto.setPrecio(prod.getPrecio());
			productoDto.setDescripcion(prod.getDescripcion());

			model.addAttribute("productoDto", productoDto);

		} catch (Exception ex) {
			System.out.println("Excepión al Editar: " + ex.getMessage());
			return "redirect:/productos";
		}

		return "/productos/EditarProducto";
	}
	
	@PostMapping("edit")
	public String actualizarProducto(Model model, @RequestParam int id, 
			@Valid @ModelAttribute CustomerRecordDTO customerRecordDTO,
			BindingResult resultado) {

		try {
			Person person = cu.findById(id).get();
			model.addAttribute("producto", producto);
			// Si hay errores
			if (resultado.hasErrors()) {
				return "productos/EditarProducto";
			}

			if (!productoDto.getArchivoImagen().isEmpty()) {
				// Eliminamos la imagen antigua
				String dirDeImagenes = "public/images/";
				Path rutaAntiguaImagen = Paths.get(dirDeImagenes + producto.getNombreArchivoImagen());
				try {
					Files.delete(rutaAntiguaImagen);
				} catch (Exception ex) {
					System.out.println("Excepción: " + ex.getMessage());
				}

				// Grabar el archivo de la nueva imagen
				MultipartFile image = productoDto.getArchivoImagen();
				Date fechaCreacion = new Date(System.currentTimeMillis());
				String storageFileName = fechaCreacion.getTime() + "_" + image.getOriginalFilename();

				try (InputStream inputStream = image.getInputStream()) {
					Files.copy(inputStream, Paths.get(dirDeImagenes + storageFileName),
							StandardCopyOption.REPLACE_EXISTING);
				}
				producto.setNombreArchivoImagen(storageFileName);
			}
			producto.setNombre(productoDto.getNombre());
			producto.setMarca(productoDto.getMarca());
			producto.setCategoria(productoDto.getCategoria());
			producto.setPrecio(productoDto.getPrecio());
			producto.setDescripcion(productoDto.getDescripcion());

			repo.save(producto);

		} catch (Exception ex) {
			System.out.println("Excepción al grabar la edicón: " + ex.getMessage());			
		}
		
		return "redirect:/productos";
	}
	
	@GetMapping("/eliminar")
	public String eliminarProducto(@RequestParam int id) {
		
		try {
			Producto producto = repo.findById(id).get();
			//Eliminamos la imagen del producto
			Path rutaIamagen = Paths.get("public/images" + producto.getNombreArchivoImagen());
			
			try {
				Files.delete(rutaIamagen);
			}catch(Exception ex) {
				System.out.println("Excepción al Eliminar: " + ex.getMessage());
			}
			//Eliminar el producto de la base de datos
			repo.delete(producto);		
			
		}catch(Exception ex) {
			System.out.println("Excepción al Eliminar " + ex.getMessage());
		}
		
		return "redirect:/productos";
	}

}
