package com.proyecto.crudecenvios.sprindbootecenvios.security;



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import com.proyecto.crudecenvios.sprindbootecenvios.services.CustomerService;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Autowired
    private CustomerService customerService;

    @Bean
    public BCryptPasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.csrf().csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());

        http.authorizeRequests()
                .requestMatchers(antMatchers("/record**")).permitAll()
                .requestMatchers(antMatchers("/js/**", "/css/**", "/img/**")).permitAll()
                .anyRequest().authenticated();

        http.formLogin().loginPage("/login").permitAll()
                .defaultSuccessUrl("/home", true);

        http.logout().logoutUrl("/logout")
                .logoutSuccessUrl("/login?logout")
                .and()
                .exceptionHandling()
                    .accessDeniedPage("/access-denied");

        return http.build();
    }
}
